---

- name: Retrieve role-id from vault for "{{ grafana_alloy.vault_role }}"
  community.hashi_vault.vault_read:
    url: "{{ hashi_vault_addr }}"
    auth_method: approle
    role_id: "{{ hashi_vault_role_id }}"
    secret_id: "{{ hashi_vault_secret_id }}"
    path: "auth/approle/role/{{ grafana_alloy.vault_role }}/role-id"
    ca_cert: /etc/pki/ca-trust/source/anchors/refinst_ca.crt
  register: grafana_alloy_vault_role_id
  delegate_to: localhost

- name: Generate secret-id from vault for "{{ grafana_alloy.vault_role }}"
  community.hashi_vault.vault_write:
    url: "{{ hashi_vault_addr }}"
    auth_method: approle
    role_id: "{{ hashi_vault_role_id }}"
    secret_id: "{{ hashi_vault_secret_id }}"
    path: "auth/approle/role/{{ grafana_alloy.vault_role }}/secret-id"
    ca_cert: /etc/pki/ca-trust/source/anchors/refinst_ca.crt
  register: grafana_alloy_secret_id
  no_log: true
  delegate_to: localhost

# - name: Debug vault role-id
#   ansible.builtin.debug:
#     msg: "{{ grafana_alloy_vault_role_id.data.data.role_id }}"

# - name: Debug vault secret-id
#   ansible.builtin.debug:
#     msg: "{{ grafana_alloy_secret_id.data.data.secret_id }}"

- name: Generate a token for "{{ grafana_alloy.vault_role }}"
  community.hashi_vault.vault_login:
    url: "{{ hashi_vault_addr }}"
    auth_method: approle
    role_id: "{{ grafana_alloy_vault_role_id.data.data.role_id }}"
    secret_id: "{{ grafana_alloy_secret_id.data.data.secret_id }}"
    ca_cert: /etc/pki/ca-trust/source/anchors/refinst_ca.crt
  register: grafana_alloy_token
  delegate_to: localhost

# - name: Debug vault token
#   ansible.builtin.debug:
#     msg: "{{ grafana_alloy_token.login.auth.client_token }}"

- name: Create podman kube secret for "{{ grafana_alloy.container_name }}"
  containers.podman.podman_secret:
    name: grafana_alloy_pod_vault_token
    state: present
    force: true
    data: |
      apiVersion: v1
      data:
        secret: "{{ grafana_alloy_token.login.auth.client_token | b64encode }}"
      kind: Secret
      metadata:
        name: grafana_alloy_pod_vault_token
  no_log: true

- name: Copy kube manifest file for "{{ grafana_alloy.container_name }}"
  ansible.builtin.template:
    src: "files/{{ grafana_alloy.container_name }}/container_{{ grafana_alloy.container_name }}.yml"
    dest: "/etc/containers/systemd/container_{{ grafana_alloy.container_name }}.yml"
    mode: "0644"
    owner: "root"
    group: "root"

- name: Copy quadlet file for "{{ grafana_alloy.container_name }}"
  ansible.builtin.copy:
    src: "{{ grafana_alloy.container_name }}/container_{{ grafana_alloy.container_name }}.kube"
    dest: "/etc/containers/systemd/container_{{ grafana_alloy.container_name }}.kube"
    mode: "0644"
    owner: "root"
    group: "root"

- name: Copy configmap files for "{{ grafana_alloy.container_name }}"
  ansible.builtin.copy:
    src: "{{ grafana_alloy.container_name }}/{{ item.configmap }}"
    dest: "/etc/containers/systemd/{{ item.configmap }}"
    mode: "0644"
    owner: "root"
    group: "root"
  loop:
    - { configmap: "container_grafana_alloy_cisco_snmp.yml_configmap" }
    - { configmap: "container_grafana_alloy_config.alloy.configmap" }

## We have no way of detecting when template image is updated/changed, so we always restart the container
- name: Restart and enable systemd container_{{ grafana_alloy.container_name }}.service
  ansible.builtin.systemd:
    name: "container_{{ grafana_alloy.container_name }}.service"
    enabled: yes
    state: restarted
    daemon_reload: yes
  throttle: 1
