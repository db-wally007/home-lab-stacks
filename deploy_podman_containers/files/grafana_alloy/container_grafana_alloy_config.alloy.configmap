apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-alloy-configmap
data:
  config.alloy: |
    ////////////////////////////////////////
    // general config block
    ////////////////////////////////////////
    logging {
        level = "warn"
    }
    http {
        tls {
            cert_file        = "/etc/secrets/refinst_" + sys.env("HOSTNAME") + ".crt"
            key_file         = "/etc/secrets/refinst_" + sys.env("HOSTNAME") + ".key"
            // cipher_suites    = ["TLS_RSA_WITH_AES_256_GCM_SHA384",]
            client_ca_file   = "/etc/secrets/refinst_ca.crt"
            client_auth_type = "RequireAndVerifyClientCert"
        }
    }
    prometheus.remote_write "mimir" {
        endpoint {
            url = "https://mimir.ref:9096/api/v1/push"
            tls_config {
            ca_file   = "/etc/secrets/refinst_ca.crt"
            cert_file = "/etc/secrets/refinst_" + sys.env("HOSTNAME") + ".crt"
            key_file  = "/etc/secrets/refinst_" + sys.env("HOSTNAME") + ".key"
            }
        }
    }
    ////////////////////////////////////////
    // vsan block
    ////////////////////////////////////////
    remote.vault "kv_vmware_vcenter_vsan_readonly" {
        server           = sys.env("VAULT_ADDR")
        path             = "kv/vmware/vcenter/vsan/readonly"
        reread_frequency = "0s"
        auth.token {
            token = sys.env("VAULT_TOKEN")
        }
    }
    discovery.dns "vsan" {
        names = ["_exporter_vsan._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "vsan" {
        targets = discovery.dns.vsan.targets
        rule {
            source_labels = ["__address__"]
            regex         = "([^:]+)(:[0-9]+)?"
            target_label  = "instance"
            replacement   = "${1}"
        }
    }
    prometheus.scrape "vsan" {
        targets         = discovery.relabel.vsan.output
        forward_to      = [prometheus.relabel.vsan.receiver]
        job_name        = "vsan-20s"
        metrics_path    = "/vsanmetrics"
        scheme          = "https"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
        authorization {
            type        = "Bearer"
            credentials = remote.vault.kv_vmware_vcenter_vsan_readonly.data.token
        }
        tls_config {
            insecure_skip_verify = true
        }
    }
    prometheus.relabel "vsan" {
        forward_to = [prometheus.remote_write.mimir.receiver]
        rule {
            source_labels = ["instance"]
            target_label  = "host_name"
            replacement   = "${1}"
        }
        rule {
            regex  = "hostname"
            action = "labeldrop"
        }
    }
    ////////////////////////////////////////
    // vmware exporter block
    ////////////////////////////////////////
    discovery.dns "vmware" {
        names = ["_exporter_vmware._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "vmware" {
        targets = discovery.dns.vmware.targets
        rule {
            source_labels = ["__address__"]
            target_label  = "__param_target"
        }
        rule {
            source_labels = ["__param_target"]
            target_label  = "instance"
        }
        rule {
            target_label = "__address__"
            replacement  = "exporter_vmware:9272"
        }
    }
    prometheus.scrape "vmware" {
        targets         = discovery.relabel.vmware.output
        forward_to      = [prometheus.remote_write.mimir.receiver]
        job_name        = "vmware-20s"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
    }
    ////////////////////////////////////////
    // veeam block
    ////////////////////////////////////////
    discovery.dns "veeam" {
        names = ["_exporter_veeam._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "veeam" {
        targets = discovery.dns.veeam.targets
        rule {
            source_labels = ["__address__"]
            regex         = "^([^:]+):(.+)"
            target_label  = "__param_target"
            replacement   = "${1}"
        }
        rule {
            source_labels = ["__param_target"]
            target_label  = "instance"
        }
        rule {
            target_label = "__address__"
            replacement  = "exporter_veeam:9247"
        }
    }
    prometheus.scrape "veeam" {
        targets         = discovery.relabel.veeam.output
        forward_to      = [prometheus.relabel.veeam.receiver]
        job_name        = "veeam-1m"
        scrape_interval = "1m"
        clustering {
            enabled = true
        }
    }
    prometheus.relabel "veeam" {
        forward_to = [prometheus.remote_write.mimir.receiver]
        rule {
            source_labels = ["jobname"]
            regex         = "agora_vm_backup\\\\troy_vm_backup"
            target_label  = "jobname"
            replacement   = "agora_vm_backup_copy"
        }
        rule {
            source_labels = ["jobname"]
            regex         = "troy_phobos_backup\\ -\\ 192\\.168\\.123\\.253"
            target_label  = "jobname"
            replacement   = "troy_phobos_backup"
        }
    }
    ////////////////////////////////////////
    // node exporter block (dromos)
    ////////////////////////////////////////
    discovery.dns "node" {
        names = ["_exporter_node._tcp.ref"]
        type  = "SRV"
    }
    prometheus.scrape "node" {
        targets         = discovery.dns.node.targets
        forward_to      = [prometheus.relabel.node.receiver]
        job_name        = "node_exporter-20s"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
    }
    prometheus.relabel "node" {
        forward_to = [prometheus.remote_write.mimir.receiver]
        rule {
            source_labels = ["instance"]
            regex         = "([^.]+)(.+)"
            target_label  = "instance"
            replacement   = "${1}"
        }
    }
    ////////////////////////////////////////
    // netapp block
    ////////////////////////////////////////
    discovery.dns "netapp" {
        names = ["_exporter_netapp._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "netapp" {
        targets = discovery.dns.netapp.targets
        // rule {
        //     source_labels = ["__meta_dns_srv_record_target"]
        //     target_label  = "instance"
        //     regex         = "exporter_netapp-pod:12990"
        //     replacement   = "troy"
        // }
        // rule {
        //     source_labels = ["__meta_dns_srv_record_target"]
        //     target_label  = "instance"
        //     regex         = "exporter_netapp-pod:12991"
        //     replacement   = "agora"
        // }
    }
    prometheus.scrape "netapp" {
        targets         = discovery.relabel.netapp.output
        forward_to      = [prometheus.remote_write.mimir.receiver]
        job_name        = "netapp_harvest-20s"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
    }
    ////////////////////////////////////////
    // hpilo block
    ////////////////////////////////////////
    remote.vault "kv_ilo_readonly" {
        server           = sys.env("VAULT_ADDR")
        path             = "kv/ilo/readonly"
        reread_frequency = "0s"
        auth.token {
            token = sys.env("VAULT_TOKEN")
        }
    }
    discovery.dns "hpilo" {
        names = ["_exporter_hpilo._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "hpilo" {
        targets = discovery.dns.hpilo.targets
        rule {
            source_labels = ["__meta_dns_srv_record_target"]
            target_label  = "__param_ilo_host"
            regex         = "(.*)."
            replacement   = "${1}"
        }
        rule {
            source_labels = ["__param_ilo_host"]
            target_label  = "ilo_host"
        }
        rule {
            source_labels = ["__param_ilo_host"]
            target_label  = "instance"
        }
        rule {
            target_label = "__address__"
            replacement  = "exporter_hpilo:9416"
        }
    }
    prometheus.scrape "hpilo" {
        targets         = discovery.relabel.hpilo.output
        forward_to      = [prometheus.remote_write.mimir.receiver]
        job_name        = "hpilo-1m"
        scrape_timeout  = "10s"
        scrape_interval = "1m"
        params = {
            ilo_user     = [convert.nonsensitive(remote.vault.kv_ilo_readonly.data.username)],
            ilo_password = [convert.nonsensitive(remote.vault.kv_ilo_readonly.data.password)],
        }
        clustering {
            enabled = true
        }
    }
    ////////////////////////////////////////
    // dromos haproxy block
    ////////////////////////////////////////
    discovery.dns "haproxy" {
        names = ["_exporter_haproxy._tcp.ref"]
        type  = "SRV"
    }
    prometheus.scrape "haproxy" {
        targets         = discovery.dns.haproxy.targets
        forward_to      = [prometheus.relabel.haproxy.receiver]
        job_name        = "haproxy-20s"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
    }
    prometheus.relabel "haproxy" {
        forward_to = [prometheus.remote_write.mimir.receiver]
        rule {
            source_labels = ["instance"]
            regex         = "([^.]+)(.+)"
            target_label  = "instance"
            replacement   = "${1}"
        }
    }
    ////////////////////////////////////////
    // text exporter block
    ////////////////////////////////////////
    prometheus.exporter.unix "text_exporter" {
        set_collectors  = ["textfile"]
        textfile {
            directory = "/var/log/node_exporter"
        }
    }
    discovery.relabel "text_exporter" {
        targets = prometheus.exporter.unix.text_exporter.targets
        rule {
            source_labels = ["job"]
            target_label  = "job"
            replacement   = "text_exporter-20s"
        }
    }
    prometheus.scrape "text_exporter" {
        targets         = discovery.relabel.text_exporter.output
        forward_to      = [prometheus.remote_write.mimir.receiver]
        scrape_interval = "20s"
    }
    ////////////////////////////////////////
    // snmp block
    ////////////////////////////////////////
    discovery.dns "snmp_cisco" {
        names = ["_exporter_snmp_cisco._tcp.ref"]
        type  = "SRV"
    }
    discovery.relabel "snmp_cisco" {
        targets = discovery.dns.snmp_cisco.targets
        rule {
            source_labels = ["__meta_dns_srv_record_target"]
            target_label  = "address"
            replacement   = "$1"
        }
        rule {
            source_labels = ["__meta_dns_srv_record_target"]
            target_label  = "name"
            regex         = "([^\\.]+)(\\..*)"
            replacement   = "$1"
        }
        rule {
            target_label = "module"
            replacement  = "cisco_mib"
        }
    }
    prometheus.exporter.snmp "snmp_cisco" {
        config_file = "/etc/alloy/cisco_snmp.yml"
        targets     = discovery.relabel.snmp_cisco.output
    }
    prometheus.scrape "snmp_cisco" {
        targets         = prometheus.exporter.snmp.snmp_cisco.targets
        forward_to      = [prometheus.relabel.snmp_cisco.receiver]
        job_name   = "cisco_snmp-20s"
        scrape_interval = "20s"
        clustering {
            enabled = true
        }
    }
    prometheus.relabel "snmp_cisco" {
        forward_to = [prometheus.remote_write.mimir.receiver]
        rule {
            source_labels = ["job"]
            regex         = "(^.*snmp)\\/(.*)"
            target_label  = "instance"
            replacement   = "$2"
        }
        rule {
            source_labels = ["job"]
            target_label  = "job"
            replacement   = "cisco_snmp-20s"
        }
    }
    ////////////////////////////////////////
    // alloy block
    ////////////////////////////////////////
    prometheus.exporter.self "container_alloy" { }
    discovery.relabel "container_alloy" {
        targets = prometheus.exporter.self.container_alloy.targets
        rule {
            source_labels = ["job"]
            target_label  = "job"
            replacement   = "grafana_alloy-20s"
        }
    }
    prometheus.scrape "container_alloy" {
        targets         = discovery.relabel.container_alloy.output
        forward_to      = [prometheus.remote_write.mimir.receiver]
        scrape_interval = "20s"
    }
    ////////////////////////////////////////
    // otelcol vcenter block (some features not implemented yet)
    ////////////////////////////////////////
    // remote.vault "kv_vmware_vcenter_readonly" {
    //     server           = sys.env("VAULT_ADDR")
    //     path             = "kv/vmware/vcenter/readonly"
    //     reread_frequency = "0s"
    //     auth.token {
    //         token = sys.env("VAULT_TOKEN")
    //     }
    // }
    // otelcol.receiver.vcenter "default" {
    //     endpoint = "https://refinst-vcenter.ref"
    //     username = convert.nonsensitive(remote.vault.kv_vmware_vcenter_readonly.data.username)
    //     password = convert.nonsensitive(remote.vault.kv_vmware_vcenter_readonly.data.password)
    //     collection_interval = "20s"
    //     tls {
    //         insecure = true
    //     }
    //     debug_metrics {
    //         disable_high_cardinality_metrics = false
    //     }
    //     output {
    //         metrics = [otelcol.processor.batch.default.input]
    //     }
    // }
    // otelcol.processor.batch "default" {
    //     output {
    //         metrics = [otelcol.exporter.prometheus.default.input]
    //     }
    // }
    // otelcol.exporter.prometheus "default" {
    //     forward_to = [prometheus.remote_write.mimir.receiver]
    //     resource_to_telemetry_conversion = true
    // }