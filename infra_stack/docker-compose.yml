
---

version: "3.6"

networks:
  docker_bridge:
    name: docker_bridge
    driver: bridge

volumes:
  prometheus_data: {}

services:
  portainer:  ## container manager
    image: portainer/portainer-ce:latest
    container_name: portainer
    environment:
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - TZ=CET
    ports:
      - 9443:9443/tcp
    restart: always
    networks:
      - docker_bridge
    volumes:
      - ${BASE_PATH}/portainer:/data
      - /run/podman/podman.sock:/var/run/docker.sock

  homepage:  ## dashboard website
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=CET
    volumes:
      - ${BASE_PATH}/dashboard:/app/config
      - /run/podman/podman.sock:/var/run/docker.sock:ro ## for docker integration
    ports:
      - 8585:3000/tcp
    restart: unless-stopped
    networks:
      - docker_bridge

  dockerproxy: ## homepage docker integration helper
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /run/podman/podman.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped
    networks:
      - docker_bridge

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ${BASE_PATH}/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090/tcp
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    restart: unless-stopped
    networks:
      - docker_bridge

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    user: '0'
    ports:
      - '8081:3000'
    networks:
      - docker_bridge
    volumes:
      - ${BASE_PATH}/grafana/data:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=http://grafana
      - GF_SERVER_DOMAIN=homelab-cz.org
      - GF_SERVER_ENFORCE_DOMAIN=false
      - GR_SERVER_SERVE_FROM_SUB_PATH=true

  tunnel:
    container_name: tunnel
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run
    networks:
      - docker_bridge
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}

  nginxproxymanager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginxproxymanager
    restart: unless-stopped
    ports:
      - '443:443' # Public HTTPS Port
      - '80:80' # Public HTTP Port
      - '81:81' # Admin Web Port
    environment:
      DISABLE_IPV6: 'true'
    volumes:
      - ${BASE_PATH}/nginxproxymanager/data:/data
      - ${BASE_PATH}/nginxproxymanager/letsencrypt:/etc/letsencrypt
    networks:
      - docker_bridge
    restart: unless-stopped

  
  # grafana-agent:
  #   container_name: grafana-agent
  #   image: grafana/agent:latest
  #   entrypoint:
  #     - /bin/grafana-agent run
  #     - --disable-reporting=true
  #     - --storage.path=/var/lib/grafana-agent-flow
  #     - /etc/grafana-agent/
  #   environment:
  #     - AGENT_MODE=flow
  #   ports:
  #     - 12345:12345/tcp
  #   volumes:
  #     - ${BASE_PATH}/grafana-agent/config/:/etc/grafana-agent
  #   restart: unless-stopped
  #   networks:
  #     - docker_bridge